zaxis=list(title="SECTOR")),
annotations=list(
x=1.13, y=1.05,
text="Frequency of Crime",
xref="paper", yref="paper",
showarrow=F
))
plot1
# Sectors B, D, Q, U, J, W have very large frequencies of Car Prowl
##################################################
##### Crime by Beat visualisation
### Graph of Crime Frequency by Sectors
freqDF <- crime_beat[c("OCC_TIME", "SUB_CATE", "BEAT")]
freqDF$SECTOR <- substr(freqDF$BEAT, 1, 1)
freqDF <- subset(freqDF, SUB_CATE != "")
### barplot data
freqDF <- as.data.frame(table(freqDF$SECTOR))
colnames(freqDF) <- c("Sector", "Frequency")
### barplot drawing
plot2 <- ggplot(data=freqDF, mapping=aes(x=Sector, y=Frequency)) +
geom_bar(aes(color=Sector, fill=Sector), stat="identity", show.legend=F) +
theme(axis.line = element_line(colour = "black", size = 1, linetype = "solid"))
plot2
dbDisconnectAll()
source('database/getDB.R')
# Probability Function
## param : year
## param : Crime Type(T : Total, Pb : Prob, V : Violent, Pp : Property)
getTop10City <- function(year_vec, type) {
pb <- progress_bar$new(format = "Inserting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = length(year_vec), clear = F)
for(i in year_vec) {
data01 <- getFBIData(i)
data01$Total <- data01$VIOLENT_CRIME + data01$PROPERTY_CRIME
data01$Prob <- round(data01$Total / data01$POPULATION, 4) * 100
if(type == 'T') {
data01$Target <- data01$Total
y_label <- 'Total Frequency'
plot_main <- paste("Top 20 ", i, " Total Crimes Frequency in WA", sep = '')
}
else if(type == 'Pb') {
data01$Target <- data01$Prob
y_label <- 'Ratio'
plot_main <- paste("Top 20 ", i, " Crimes compared to total population in WA", sep = '')
}
else if(type == 'V') {
data01$Target <- round(data01$VIOLENT_CRIME / data01$Total, 4) * 100
y_label <- 'Violent Crimes Ratio'
plot_main <- paste("Top 20 ", i, " Violent Crimes Ratio in WA", sep = '')
}
else if(type == 'Pp') {
data01$Target <- round(data01$PROPERTY_CRIME / data01$Total, 4) * 100
y_label <- 'Property Crimes Ratio'
plot_main <- paste("Top 20 ", i, " Property Crimes Ratio in WA", sep = '')
}
top10 <- data01 %>% arrange(desc(data01$Target)) %>% head(20)
plot1 <-
ggplot(data = top10,
aes(x = CITY, y = Target, fill = factor(ifelse(
CITY == 'Seattle', 'Normal', 'Highlighted')))) +
geom_bar(position = 'dodge', stat = 'identity') +
labs(x = "City", y = y_label, title = plot_main, color='YEAR') +
theme_minimal(base_family = 'D2Coding') +
scale_x_discrete(limit = top10$CITY) +
scale_fill_manual(name = 'CITY', values = c('grey50', 'red')) +
theme(legend.position = 'none')
print(plot1)
pb$tick()
}
}
### Main
setYear <- c(2008:2018)
# Crime Type(T : Total, Pb : Prob, V : Violent, Pp : Property)
getTop10City(setYear, 'T')
# getTop10City(setYear, 'Pb')
# getTop10City(setYear, 'V')
# getTop10City(setYear, 'Pp')
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Main
df_combined <- cutMonthYear(df)
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(color = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
df_changed
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_combined <- cutMonthYear(df)
df_combined
df
####################################################################################################
### Main
df <- df[-1]
df_combined <- cutMonthYear(df)
df_combined
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df
####################################################################################################
### Main
df <- df[,c(-1, 3:ncol(df))]
####################################################################################################
### Main
df <- df[,-c(3:ncol(df))]
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Main
df <- df[,-c(3:ncol(df))]
df <- df[-1]
df_combined <- cutMonthYear(df)
df_combined
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(color = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
ncol(mx_table)
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$occMonth))
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
df_combined
avg
unique(df_combined$occMonth)
df_combined
df_changed
graph01 <- ggplot(df_changed, aes(x = month, y = Freq)) +
geom_line(aes(color = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
graph01 <- ggplot(df_changed, aes(x = month, y = Freq)) +
geom_line(aes(color = year, group = year))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Main
df <- df[,-c(3:ncol(df))]
df <- df[-1]
df_combined <- cutMonthYear(df)
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
graph01 <- ggplot(df_changed, aes(x = month, y = Freq)) +
geom_line(aes(color = year, group = year))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
ncol(mx_table)
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$month))
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
### dataset
df <- getColumns('*')
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
source('database/getDB.R')
### dataset
df <- getColumns('*')
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Main
df <- df[,-c(3:ncol(df))]
df <- df[-1]
df_combined <- cutMonthYear(df)
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
graph01 <- ggplot(df_changed, aes(x = month, y = Freq)) +
geom_line(aes(color = year, group = year))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
ncol(mx_table)
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$month))
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
### dataset
df <- getColumns('*')
head(df)
### dataset
df <- getColumns('OCC_DATE')
### dataset
df <- getColumns('OCC_DATE')
df
df_combined <- cutMonthYear(df)
df_combined
### dataset
df <- getColumns('OCC_DATE')
head(df)
####################################################################################################
### Main
df_combined <- cutMonthYear(df)
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_changed
graph01 <- ggplot(df_changed, aes(x = month, y = Freq)) +
geom_line(aes(color = year, group = year))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
ncol(mx_table)
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$month))
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
####################################################################################################
### Import
source("script/functions/functions.R")
source("script/functions/mlfunctions.R")
source("database/getDB.R")
####################################################################################################
### Importing Data
# Get required Columns
reqCol <- c("OCC_DATE", "REP_DATE","REP_TIME","SUB_CATE","PRI_DESC", "BEAT", "NEIGHBOR")
# get DB
cdf <- getColumns(reqCol)
# add Year and Month col
cdf <- cutMonthYear(cdf)
str(cdf)
# Finding the Frequency of each crime category
crimeF <- table(cdf$SUB_CATE)
crimeF <- as.data.frame(crimeF)
crimeF <- crimeF[order(crimeF$Freq, decreasing=T),]
# Plotting Crime Frequency
crimePlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), crimeF, position="stack", show.legend=F) +
labs(x="Crime Subcategory", y="Frequency", title="Frequecy of Crime by Frequency between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(crimeF)))
# crimePlot1
##################################################
### Car Prowl Prediction
# Data Extraction
cpData <- subset(cdf, SUB_CATE == "CAR PROWL")
nrow(cpData) # 144,327
# Find the Frequency of Crime Neighborhood
neighF <- table(cpData$NEIGHBOR)
neighF <- as.data.frame(neighF)
neighF <- neighF[order(neighF$Freq, decreasing=T),]
# Plotting Frequency of Crime Neighborhood of Car Prowl subcategory
neighPlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), neighF, position="stack", show.legend=F) +
labs(x="Crime Neighborhood", y="Frequency", title="Frequency of Crime by Neighborhood between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(neighF)))
# neighPlot1
# Adding a y = 4000 line to the previous graph
neighPlot2 <- neighPlot1 + geom_hline(aes(yintercept=4000), color="Black", size=2) +
annotate(geom="text", x=30, y=4300, label="Frequency = 4000", color="Black", size=5)
# neighPlot2
# Subsetting Neighborhoods(15, 46, 52, 42, 8, 49, 5, 57, 4) from cpData
neighF <- subset(neighF, Freq >= 4000)
neighborhoods <- c("DOWNTOWN COMMERCIAL", "QUEEN ANNE", "SLU/CASCADE", "NORTHGATE", "CAPITOL HILL", "ROOSEVELT/RAVENNA", "BELLTOWN", "UNIVERSITY", "BALLARD SOUTH")
neData <- subset(cpData, NEIGHBOR %in% neighborhoods)
# Remove "Occurred.Date" column
neData <- neData[,-1]
colnames(neData) <- c("oYear","oMonth","rDate","rTime","Subcategory","Description","Beat","Neighborhood")
# Divide "Reported.Date" column into Year and Month
rYM <- dateToYM(neData["rDate"], "rYear", "rMonth")
neData <- cbind(neData, rYM)
# Divide "Reported.Time" column into Hour and Minute
neData <- na.omit(neData)
rTimeInt <- neData$rTime
rTimeChar <- as.character(rTimeInt)
for(i in c(1:length(rTimeChar))) { # Making all elements length of 4
if(nchar(rTimeChar[i]) == 3) {
rTimeChar[i] <- paste("0", rTimeChar[i], sep="")
} else if(nchar(rTimeChar[i]) == 2) {
rTimeChar[i] <- paste("00", rTimeChar[i], sep="")
} else if(rTimeChar[i] == 0) {
rTimeChar[i] <- "0000"
} else if(nchar(rTimeChar[i]) == 1) {
rTimeChar[i] <- paste("000", rTimeChar[i], sep="")
}
}
rHour <- substr(rTimeChar, 1, 2)
rMin <- substr(rTimeChar, 3, 4)
neData <- cbind(neData, rHour, rMin)
# Remove Factors
factors <- c("oMonth","rMonth","rHour")
for(f in factors) {
neData[f] <- as.numeric(as.character(unlist(neData[f])))
}
# Reorder Data Frame and remove unnecessary columns
neData <- neData[c("oMonth","rMonth","rHour","Beat")]
##############################
### nnet package
# One-Hot Encoding
beat.ind <- class.ind(neData$Beat)
neData <- cbind(neData, beat.ind)
# Training and Testing Data
idx <- sample(c(1:nrow(neData)), 0.8*nrow(neData))
trainData <- neData[idx,]
testData <- neData[-idx,]
trainX <- trainData[,c(1:3)]; trainY <- trainData[,c(5:30)];
testX <- testData[,c(1:3)];
# Data Normalisation
trainX <- as.data.frame(lapply(trainX, normalize))
testX <- as.data.frame(lapply(testX, normalize))
# Create Model
# nnModel <- nnet(x=trainX, y=trainY, decay=5e-04, maxit=100, MaxNWts=2000, trace=T, size=c(30,30), softmax=T)
nnModel <- nnet(x = trainX, y = trainY, size = 10, maxit = 100, softmax = T)
plot.nnet(nnModel)
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(DBI)
library(RMySQL)
library(stringr)
library(openxlsx)
library(progress)
### Variable and Option
# Get Data set and Preprogress
## Get Seattle Crime Data
df <- read.csv('dataset/Crime/Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
df <- subset(df, as.numeric(substr(df$Occurred.Date, 7, 10)) > 2007)
## Get FBI Data
fbi_csv <- data.frame()
year_vec <- c('08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18')
for(i in c(1:length(year_vec))) {
path <- paste('dataset/Crime/FBI_Offenses/FBI_Offenses_20', year_vec[i], '.csv', sep = '')
tmp <- read.csv(path, stringsAsFactors = F)
fbi_csv <- rbind(fbi_csv, tmp)
}
for(i in c(1:ncol(fbi_csv))) {
if(i == 2) {
next()
}
fbi_csv[i] <- str_replace_all(unlist(fbi_csv[i]), ',', '')
fbi_csv[i] <- as.numeric(unlist(fbi_csv[i]))
}
fbi_csv[is.na(fbi_csv)] <- 0
## Get Edu Data
edu_csv <- read.csv('dataset/Edu/Edu_Ver.csv')
edu_csv[is.na(edu_csv)] <- 0
str(edu_csv)
# MySQL DB Connect
conn <- dbConnect(MySQL(), user="crime", password="Crime1q2w3e4r!", dbname="crimedb",host="localhost")
### Function
# Database Create Seattle Table Function
## param : none
dbCreateSeattleTable <- function() {
query01 <- 'CREATE TABLE SEATTLE_CRIME(REP_NUM INT AUTO_INCREMENT PRIMARY KEY,OCC_DATE VARCHAR(32),OCC_TIME INT,REP_DATE VARCHAR(32),REP_TIME INT,SUB_CATE VARCHAR(128),PRI_DESC VARCHAR(128),PRECINCT VARCHAR(64),SECTOR VARCHAR(8),BEAT VARCHAR(8),NEIGHBOR VARCHAR(128))'
dbSendQuery(conn, query01)
}
dbCreateFBITable <- function() {
query02 <- 'CREATE TABLE FBI_DATA(YEAR INT,CITY VARCHAR(64),POPULATION INT,VIOLENT_CRIME INT,MURDER INT,RAPE INT,ROBBERY INT,AGGRABATED_ASSAULT INT,PROPERTY_CRIME INT,BURGLARY INT,LARCENY_THEFT INT,MOTOR_VEHICLE_THEFT INT,ARSON INT)'
dbSendQuery(conn, query02)
}
dbCreateUnivTable <- function() {
query03 <- 'CREATE TABLE USA_UNIV_COMPLETIONS(REP_NUM INT AUTO_INCREMENT PRIMARY KEY, YEAR_N INT,UNIV_ID INT,UNIV_NAME VARCHAR(256),SECTOR_ID INT,SECTOR_NAME VARCHAR(256),GEO_ID VARCHAR(256),GEO_NAME VARCHAR(64),COMPLETIONS INT)'
dbSendQuery(conn, query03)
}
# Database Insert Function
# Seattle Crime data
## param : data frame
dbSendSeattleCrime <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(format = "Inserting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = len, clear = F)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
# cat(query01, '\n')
dbSendQuery(conn, query01)
pb$tick()
}
cat('FIN\n')
}
# FBI Data
## param : data frame
dbSendFBIData <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(format = "Inserting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = len, clear = F)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO FBI_DATA VALUES(",
df$Year[l], ", \'",
df$City[l], "\', ",
df$Population[l], ", ",
df$Violent.crime[l], ", ",
df$Murder[l], ", ",
df$Rape[l], ", ",
df$Robbery[l], ", ",
df$Aggravated.assault[l], ", ",
df$Property.crime[l], ", ",
df$Burglary[l], ", ",
df$Larceny.theft[l], ", ",
df$Motor.vehicle.theft[l], ", ",
df$Arson[l], ")",
sep = '')
dbSendQuery(conn, query01)
pb$tick()
}
cat('FIN\n')
}
# Univ Completion data
dbSendEdu <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(format = "Inserting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = len, clear = F)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO USA_UNIV_COMPLETIONS VALUES(REP_NUM, ",
df$Year[l], ", ",
df$ID.University[l], ", \'",
df$University[l], "\', ",
df$ID.Sector[l], ", \'",
df$Sector[l], "\', \'",
df$ID.Geography[l], "\', \'",
df$Geography[l], "\', ",
df$Completions[l],")",
sep = '')
dbSendQuery(conn, query01)
pb$tick()
}
cat('FIN\n')
}
# Database Disconnect All Function
dbDisconnectAll <- function(){
ile <- length(dbListConnections(MySQL())  )
lapply( dbListConnections(MySQL()), function(x) dbDisconnect(x) )
cat(sprintf("%s connection(s) closed.\n", ile))
}
### Main
# Database Send
## Seattle Crime Data
# dbCreateSeattleTable()
# dbSendSeattleCrime(df)
## FBI Data
# dbCreateFBITable()
# dbSendFBIData(fbi_csv)
## Univ Completions data
dbCreateUnivTable()
dbSendEdu(edu_csv)
### FIN
# DB Disconnect
dbDisconnectAll()
