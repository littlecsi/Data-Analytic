dbDisconnectAll()
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
for(j in c(1:length(lonlatpoint[[i]]))) {
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
plot3 + geom_point(aes(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]]), size = 0.5)
pb$tick(1)
}
}
}
dbDisconnectAll()
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
for(i in c(1:length(lonlatpoint))) {
for(j in c(1:length(lonlatpoint[[i]]))) {
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
plot3 + geom_point(aes(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]]), size = 0.5)
}
}
pb$tick()
}
dbDisconnectAll()
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
for(j in c(1:length(lonlatpoint[[i]]))) {
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
plot3 + geom_point(aes(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]]), size = 0.5)
}
}
pb$tick(1)
}
dbDisconnectAll()
plot3
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
plot3
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
for(j in c(1:length(lonlatpoint[[i]]))) {
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
plot3 + geom_point(aes(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]]), size = 0.5)
}
}
pb$tick(1)
}
dbDisconnectAll()
plot3 + geom_point(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]], size = 0.5)
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
plot3
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
for(j in c(1:length(lonlatpoint[[i]]))) {
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
plot3 + geom_point(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]], size = 0.5)
}
}
pb$tick(1)
}
lonlatpoint[[1]][[1]][[k,1]]
lonlatpoint[[1]][[1]][[1,1]]
for(i in c(1:length(lonlatpoint))) {
cat(i, '\n')
for(j in c(1:length(lonlatpoint[[i]]))) {
cat(j, '\n')
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
cat(k, '\n')
plot3 + geom_point(x=lonlatpoint[[i]][[j]][[k,1]], y=lonlatpoint[[i]][[j]][[k,2]], size = 0.5)
}
}
pb$tick(1)
}
lonlatpoint[[1]][[1]][[1031]]
lonlatpoint[[1]][[1]][[1031,]]
lonlatpoint[[1]][[1]][[1030,]]
length(lonlatpoint[[1]][[1]])
lonlatpoint[[1]][[1]][[1029,]]
lonlatpoint[[1]][[1]][[1030]]
i
j
k
lonlatpoint[[1]][[1]][[1031,1]]
lonlatpoint[[1]][[1]][[1]]
lonlatpoint[[1]][[1]][[2]]
lonlatpoint[[1]][[1]][[3]]
lonlatpoint[[1]][[1]][1031,1]
lonlatpoint[[1]][[1]][1031,]
lonlatpoint[[1]][[1]][1031]
lonlatpoint[[1]][[1]]
head(lonlatpoint[[1]][[1]])
length(lonlatpoint[[1]][[1]])
lonlatpoint[[1]][[1]][2060]
lonlatpoint[[1]][[1]][1]
lonlatpoint[[1]][[1]][2]
lonlatpoint[[1]][[1]][[1]]
lonlatpoint[[1]][[1]][[2]]
lonlatpoint[[1]][[1]][1,2]
lonlatpoint[[1]][[1]][1,1]
lonlatpoint[[1]][[1]][1030,1]
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
plot3
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
cat(i, '\n')
for(j in c(1:length(lonlatpoint[[i]]))) {
cat(j, '\n')
for(k in c(1:length(lonlatpoint[[i]][[j]]))) {
cat(k, '\n')
plot3 + geom_point(x=lonlatpoint[[i]][[j]][k,1], y=lonlatpoint[[i]][[j]][k,2], size = 0.5)
}
}
pb$tick(1)
}
dbDisconnectAll()
####################################################################################################
##### Library
library(lubridate)
library(ggplot2)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidyverse)
library(progress)
####################################################################################################
##### Import
source("database/getDB.R")
####################################################################################################
##### ggmap setup
ggmap::register_google(key="AIzaSyCJ__Rslc-MfKssqQb0EURUOWV7ZE_o8nE")
####################################################################################################
##### Main
##################################################
##### Map Visualisation
### Crime Frequency by Neighborhood
neighFreq <- getColumns("NEIGHBOR")
neighFreq <- as.data.frame(table(neighFreq$NEIGHBOR))
### Coordinates of borders
map <- fromJSON("database/seattle_beat.json")
lonlatpoint <- map$features$geometry$rings
plot3 <- ggmap(get_googlemap(center=c(lon=-122.335467, lat=47.608013),
zoom=11, scale=2,
maptype='terrain',
color='bw'))
plot3
pb <- progress_bar$new(format = "Plotting [:bar] :current/:total (:percent) elapsed::elapsedfull", total = 55, clear = F)
pb$tick(0)
for(i in c(1:length(lonlatpoint))) {
cat(i, '\n')
for(j in c(1:length(lonlatpoint[[i]]))) {
cat(j, '\n')
for(k in c(1:length(lonlatpoint[[i]][[j]])/2)) {
cat(k, '\n')
plot3 + geom_point(x=lonlatpoint[[i]][[j]][k,1], y=lonlatpoint[[i]][[j]][k,2], size = 0.5)
}
}
pb$tick(1)
}
dbDisconnectAll()
####################################################################################################
### Library
library(ggplot2)
####################################################################################################
### Import
source("script/functions/functions.R")
source("script/functions/mlfunctions.R")
source("database/getDB.R")
####################################################################################################
### Importing Data
# df <- read.csv('dataset/Crime/Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
# colnames(df)
# Get required Columns
reqCol <- c("OCC_DATE", "REP_DATE","REP_TIME","SUB_CATE","PRI_DESC", "BEAT", "NEIGHBOR")
cdf <- getColumns(reqCol)
tmp <- cdf[, -1]
cdf <- as.data.frame(cdf[, 1])
cdf$year <- str_sub(cdf[, 1], 7, 10)
cdf$month <- str_sub(cdf[, 1], 1, 2)
cdf <- cbind(cdf, tmp)
str(cdf)
# Finding the Frequency of each crime category
crimeF <- table(cdf$SUB_CATE)
crimeF <- as.data.frame(crimeF)
crimeF <- crimeF[order(crimeF$Freq, decreasing=T),]
# Plotting Crime Frequency
crimePlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), crimeF, position="stack", show.legend=F) +
labs(x="Crime Subcategory", y="Frequency", title="Frequecy of Crime by Frequency between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(crimeF)))
# crimePlot1
##################################################
### Car Prowl Prediction
# Data Extraction
cpData <- subset(cdf, SUB_CATE == "CAR PROWL")
nrow(cpData) # 144,327
# Find the Frequency of Crime Neighborhood
neighF <- table(cpData$NEIGHBOR)
neighF <- as.data.frame(neighF)
neighF <- neighF[order(neighF$Freq, decreasing=T),]
# Plotting Frequency of Crime Neighborhood of Car Prowl subcategory
neighPlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), neighF, position="stack", show.legend=F) +
labs(x="Crime Neighborhood", y="Frequency", title="Frequency of Crime by Neighborhood between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(neighF)))
# neighPlot1
# Adding a y = 4000 line to the previous graph
neighPlot2 <- neighPlot1 + geom_hline(aes(yintercept=4000), color="Black", size=2) +
annotate(geom="text", x=30, y=4300, label="Frequency = 4000", color="Black", size=5)
# neighPlot2
# Subsetting Neighborhoods(15, 46, 52, 42, 8, 49, 5, 57, 4) from cpData
neighF <- subset(neighF, Freq >= 4000)
neighborhoods <- c("DOWNTOWN COMMERCIAL", "QUEEN ANNE", "SLU/CASCADE", "NORTHGATE", "CAPITOL HILL", "ROOSEVELT/RAVENNA", "BELLTOWN", "UNIVERSITY", "BALLARD SOUTH")
neData <- subset(cpData, NEIGHBOR %in% neighborhoods)
# Remove "Occurred.Date" column
neData <- neData[,-1]
colnames(neData) <- c("oYear","oMonth","rDate","rTime","Subcategory","Description","Beat","Neighborhood")
# Divide "Reported.Date" column into Year and Month
rYM <- dateToYM(neData["rDate"], "rYear", "rMonth")
neData <- cbind(neData, rYM)
# Divide "Reported.Time" column into Hour and Minute
neData <- na.omit(neData)
rTimeInt <- neData$rTime
rTimeChar <- as.character(rTimeInt)
for(i in c(1:length(rTimeChar))) { # Making all elements length of 4
if(nchar(rTimeChar[i]) == 3) {
rTimeChar[i] <- paste("0", rTimeChar[i], sep="")
} else if(nchar(rTimeChar[i]) == 2) {
rTimeChar[i] <- paste("00", rTimeChar[i], sep="")
} else if(rTimeChar[i] == 0) {
rTimeChar[i] <- "0000"
} else if(nchar(rTimeChar[i]) == 1) {
rTimeChar[i] <- paste("000", rTimeChar[i], sep="")
}
}
rHour <- substr(rTimeChar, 1, 2)
rMin <- substr(rTimeChar, 3, 4)
neData <- cbind(neData, rHour, rMin)
# Remove Factors
factors <- c("oMonth","rMonth","rHour")
for(f in factors) {
neData[f] <- as.numeric(as.character(unlist(neData[f])))
}
# Reorder Data Frame and remove unnecessary columns
neData <- neData[c("oMonth","rMonth","rHour","Beat")]
##############################
### nnet package
# One-Hot Encoding
beat.ind <- class.ind(neData$Beat)
neData <- cbind(neData, beat.ind)
# Training and Testing Data
idx <- sample(c(1:nrow(neData)), 0.8*nrow(neData))
trainData <- neData[idx,]
testData <- neData[-idx,]
trainX <- trainData[,c(1:3)]; trainY <- trainData[,c(5:30)];
testX <- testData[,c(1:3)];
# Data Normalisation
trainX <- as.data.frame(lapply(trainX, nomalize))
testX <- as.data.frame(lapply(testX, nomalize))
install.packages("neuralnet")
install.packages("devtools")
####################################################################################################
### Library
library(ggplot2)
####################################################################################################
### Import
source("script/functions/functions.R")
source("script/functions/mlfunctions.R")
source("database/getDB.R")
####################################################################################################
### Importing Data
# df <- read.csv('dataset/Crime/Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
# colnames(df)
# Get required Columns
reqCol <- c("OCC_DATE", "REP_DATE","REP_TIME","SUB_CATE","PRI_DESC", "BEAT", "NEIGHBOR")
cdf <- getColumns(reqCol)
tmp <- cdf[, -1]
cdf <- as.data.frame(cdf[, 1])
cdf$year <- str_sub(cdf[, 1], 7, 10)
cdf$month <- str_sub(cdf[, 1], 1, 2)
cdf <- cbind(cdf, tmp)
str(cdf)
# Finding the Frequency of each crime category
crimeF <- table(cdf$SUB_CATE)
crimeF <- as.data.frame(crimeF)
crimeF <- crimeF[order(crimeF$Freq, decreasing=T),]
# Plotting Crime Frequency
crimePlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), crimeF, position="stack", show.legend=F) +
labs(x="Crime Subcategory", y="Frequency", title="Frequecy of Crime by Frequency between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(crimeF)))
# crimePlot1
##################################################
### Car Prowl Prediction
# Data Extraction
cpData <- subset(cdf, SUB_CATE == "CAR PROWL")
nrow(cpData) # 144,327
# Find the Frequency of Crime Neighborhood
neighF <- table(cpData$NEIGHBOR)
neighF <- as.data.frame(neighF)
neighF <- neighF[order(neighF$Freq, decreasing=T),]
# Plotting Frequency of Crime Neighborhood of Car Prowl subcategory
neighPlot1 <- ggplot() +
geom_col(aes(Var1, Freq, fill=Var1), neighF, position="stack", show.legend=F) +
labs(x="Crime Neighborhood", y="Frequency", title="Frequency of Crime by Neighborhood between 2008 and 2018") +
theme(axis.line=element_line(color="Black", size=1, linetype="solid")) +
scale_x_discrete(labels=c(1:nrow(neighF)))
# neighPlot1
# Adding a y = 4000 line to the previous graph
neighPlot2 <- neighPlot1 + geom_hline(aes(yintercept=4000), color="Black", size=2) +
annotate(geom="text", x=30, y=4300, label="Frequency = 4000", color="Black", size=5)
# neighPlot2
# Subsetting Neighborhoods(15, 46, 52, 42, 8, 49, 5, 57, 4) from cpData
neighF <- subset(neighF, Freq >= 4000)
neighborhoods <- c("DOWNTOWN COMMERCIAL", "QUEEN ANNE", "SLU/CASCADE", "NORTHGATE", "CAPITOL HILL", "ROOSEVELT/RAVENNA", "BELLTOWN", "UNIVERSITY", "BALLARD SOUTH")
neData <- subset(cpData, NEIGHBOR %in% neighborhoods)
# Remove "Occurred.Date" column
neData <- neData[,-1]
colnames(neData) <- c("oYear","oMonth","rDate","rTime","Subcategory","Description","Beat","Neighborhood")
# Divide "Reported.Date" column into Year and Month
rYM <- dateToYM(neData["rDate"], "rYear", "rMonth")
neData <- cbind(neData, rYM)
# Divide "Reported.Time" column into Hour and Minute
neData <- omit(neData)
# Divide "Reported.Time" column into Hour and Minute
neData <- na.omit(neData)
rTimeInt <- neData$rTime
rTimeChar <- as.character(rTimeInt)
for(i in c(1:length(rTimeChar))) { # Making all elements length of 4
if(nchar(rTimeChar[i]) == 3) {
rTimeChar[i] <- paste("0", rTimeChar[i], sep="")
} else if(nchar(rTimeChar[i]) == 2) {
rTimeChar[i] <- paste("00", rTimeChar[i], sep="")
} else if(rTimeChar[i] == 0) {
rTimeChar[i] <- "0000"
} else if(nchar(rTimeChar[i]) == 1) {
rTimeChar[i] <- paste("000", rTimeChar[i], sep="")
}
}
rHour <- substr(rTimeChar, 1, 2)
rMin <- substr(rTimeChar, 3, 4)
neData <- cbind(neData, rHour, rMin)
# Remove Factors
factors <- c("oMonth","rMonth","rHour")
for(f in factors) {
neData[f] <- as.numeric(as.character(unlist(neData[f])))
}
# Reorder Data Frame and remove unnecessary columns
neData <- neData[c("oMonth","rMonth","rHour","Beat")]
##############################
### nnet package
# One-Hot Encoding
beat.ind <- class.ind(neData$Beat)
neData <- cbind(neData, beat.ind)
# Training and Testing Data
idx <- sample(c(1:nrow(neData)), 0.8*nrow(neData))
trainData <- neData[idx,]
testData <- neData[-idx,]
trainX <- trainData[,c(1:3)]; trainY <- trainData[,c(5:30)];
testX <- testData[,c(1:3)];
# Data Normalisation
trainX <- as.data.frame(lapply(trainX, nomalize))
testX <- as.data.frame(lapply(testX, nomalize))
