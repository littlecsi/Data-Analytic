head(df)
colnames(df)
nrow(df)
str(df)
conn <- dbConnect(MySQL(), user="crime", password="Crime1q2w3e4r!", dbname="naverdb",host="localhost")
conn <- dbConnect(MySQL(), user="crime", password="Crime1q2w3e4r!", dbname="crimedb",host="localhost")
conn
library(dplyr)
library(ggplot2)
library(ggdark)
### set work space
setwd('topic/Crime/')
viewClassNMode <- function(data) {
cat('class:', class(data))
cat('\n','mode:', mode(data))
}
### dataset
df <- read.csv('Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
head(df)
### sorting dataset to extract 'Occurred.Date' column
df01 <- df %>% select('Occurred.Date')
head(df01)
### substring years
year <- substr(df01$Occurred.Date, 7, 10)
head(year)
# [1] "1908" "1964" "1973" "1974" "1975" "1975"
### changing data form
tb_year <- table(year)
head(tb_year)
# year
# 1908 1964 1973 1974 1975
# 2    1    1    1    1    2
### data framing
df_year <- as.data.frame(tb_year)
head(df_year)
# year Freq
# 1         2
# 2 1908    1
# 3 1964    1
# 4 1973    1
# 5 1974    1
# 6 1975    2
# extracting specific years(2008~2018)
df <- df_year[35:45,]
mean_occr <- mean(df$Freq)
mean_occr
# [1] 46084.45
regFreq <- as.numeric(df$Freq)
regYear <- as.numeric(df$year)
reg <- lm(formula = regFreq ~ regYear)
summary(reg)
# Call:
#   lm(formula = regFreq ~ regYear)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -4146.9  -393.0   343.8   963.0  2693.8
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)   8861.5     8190.8   1.082  0.30744
# regYear        930.6      204.1   4.559  0.00137 **
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 2141 on 9 degrees of freedom
# Multiple R-squared:  0.6978,	Adjusted R-squared:  0.6642
# F-statistic: 20.78 on 1 and 9 DF,  p-value: 0.001369
# making a graphic chart
ggplot(data = df, aes(x = year, y = Freq, group = 1)) +
geom_line(linetype = "dotted", color = "red", size = 2) +
geom_point(color = "blue", size = 3) +
labs(x = "Year", y = "Frequency", title = "The Number of Crime Occurrences per Each Year during the Last 10 years") +
dark_theme_gray() +
# geom_hline(yintercept = mean_occr, color = "orange", size = 1) +
geom_text(aes(label = Freq), vjust = -0.3) +
stat_smooth(method = 'lm', col = 'orange')
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(DBI)
library(RMySQL)
library(stringr)
library(openxlsx)
### set work space
setwd('dataset/Crime')
### dataset
df <- read.csv('Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
head(df)
colnames(df)
nrow(df)
str(df)
df$Occurred.Date
substr(df$Occurred.Date, 7, 10)
as.numeric(substr(df$Occurred.Date, 7, 10))
as.numeric(substr(df$Occurred.Date, 7, 10)) < 2008
df <- subset(df, as.numeric(substr(df$Occurred.Date, 7, 10)) > 2008)
df
### dataset
df <- read.csv('Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
df <- subset(df, as.numeric(substr(df$Occurred.Date, 7, 10)) > 2007)
df
is.na(df)
table(is.na(df))
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(DBI)
library(RMySQL)
library(stringr)
library(openxlsx)
### set work space
setwd('dataset/Crime')
### dataset
df <- read.csv('Seattle_Crime_Data.csv', header = T, stringsAsFactors = F)
df <- subset(df, as.numeric(substr(df$Occurred.Date, 7, 10)) > 2007)
str(df)
conn <- dbConnect(MySQL(), user="crime", password="Crime1q2w3e4r!", dbname="crimedb",host="localhost")
### Function
dbSend <- function(df) {
len <- nrow(df)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(", df$Report.Number[l], ", \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
cat(query01, '\n')
dbSendQuery(conn, query01)
}
}
dbSend(df)
df$Report.Number
### Function
options(scipen = 100)
dbSend <- function(df) {
len <- nrow(df)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(", df$Report.Number[l], ", \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
cat(query01, '\n')
dbSendQuery(conn, query01)
}
}
dbSend(df)
head(df)
dbSend <- function(df) {
len <- nrow(df)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(\'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
cat(query01, '\n')
dbSendQuery(conn, query01)
}
}
dbSend(df)
dbSend(df)
dbSend <- function(df) {
len <- nrow(df)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
cat(query01, '\n')
dbSendQuery(conn, query01)
}
}
dbSend(df)
dbSend <- function(df) {
len <- nrow(df)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
# cat(query01, '\n')
dbSendQuery(conn, query01)
}
}
dbSend(df)
install.packages("progress")
dbSend <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(total = len)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
# cat(query01, '\n')
dbSendQuery(conn, query01)
pb$tick()
Sys.sleep(0.01)
}
}
library(progress)
dbSend <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(total = len)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
# cat(query01, '\n')
dbSendQuery(conn, query01)
pb$tick()
Sys.sleep(0.01)
}
}
dbSend(df)
dbSend <- function(df) {
len <- nrow(df)
pb <- progress_bar$new(total = len)
for(l in c(1:len)) {
query01 <- paste("INSERT INTO SEATTLE_CRIME VALUES(REP_NUM, \'", df$Occurred.Date[l], "\', ", df$Occurred.Time[l], ", \'", df$Reported.Date[l], "\', ", df$Reported.Time[l], ", \'", df$Crime.Subcategory[l], "\', \'", df$Primary.Offense.Description[l], "\', \'", df$Precinct[l], "\', \'", df$Sector[l], "\', \'", df$Beat[l], "\', \'", df$Neighborhood[l], "\')",  sep = '')
# cat(query01, '\n')
dbSendQuery(conn, query01)
pb$tick()
}
}
dbSend(df)
# DB Disconnect
dbDisconnectAll()
# Database Disconnect All Function
dbDisconnectAll <- function(){
ile <- length(dbListConnections(MySQL())  )
lapply( dbListConnections(MySQL()), function(x) dbDisconnect(x) )
cat(sprintf("%s connection(s) closed.\n", ile))
}
# DB Disconnect
dbDisconnectAll()
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(DBI)
library(RMySQL)
library(stringr)
library(openxlsx)
library(progress)
# MySQL DB Connect
conn <- dbConnect(MySQL(), user="crime", password="Crime1q2w3e4r!", dbname="crimedb",host="localhost")
# Database Disconnect All Function
dbDisconnectAll <- function(){
ile <- length(dbListConnections(MySQL())  )
lapply( dbListConnections(MySQL()), function(x) dbDisconnect(x) )
cat(sprintf("%s connection(s) closed.\n", ile))
}
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c('OCC_DATE', 'OCC_TIME')
paste(col)
paste(col, sep=',')
str_c(col, sep=',')
str_c(col, sep=',', collapse = T)
str_c(col, sep=',', collapse = F)
str_c(col, sep=',', collapse = ',')
str_c(col, sep='', collapse = ', ')
# Get Columns from Database
## param : vector
getColumns <- function(col) {
query01 <- paste("SELECT ", str_c(col, sep='', collapse = ', ') ," FROM SEATTLE_CRIME")
res <- dbGetQuery(conn, query01)
return(res)
}
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c('OCC_DATE', 'OCC_TIME')
getColumns(col)
source('database/getDB.R')
getwd()
getwd()
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c('OCC_DATE, SUB_CATE')
head(getColumns(col))
### dataset
df <- getColumns('OCC_DATE')
head(df)
str(df)
summary(df)
### 2008 ~ 2019 data
# hard-coding is the best!!!!!
# View(substr(df01$Occurred.Date, 7, 10) == '2008')
# df$Occurred.Date[1037] is TRUE
head(df01)
### dataset
df01 <- getColumns('OCC_DATE')
### 2008 ~ 2019 data
# hard-coding is the best!!!!!
# View(substr(df01$Occurred.Date, 7, 10) == '2008')
# df$Occurred.Date[1037] is TRUE
head(df01)
df01 <- gsub('/','', df01)
head(df01)
head(df01)
### dataset
df01 <- getColumns('OCC_DATE')
### 2008 ~ 2019 data
# hard-coding is the best!!!!!
# View(substr(df01$Occurred.Date, 7, 10) == '2008')
# df$Occurred.Date[1037] is TRUE
head(df01)
class(df01)
df01 <- gsub('/','', df01$OCC_DATE)
head(df01)
# year vector variable
year_vector <- as.character(c(2008:2018))
### data for each
# in 2008
test_08 <- as.data.frame(
table(
substr(subset(df01, substr(df01, 5, 8) == '2008'), 1, 2)))
test_08
### data for each
# in 2008
test_08 <- as.data.frame(
table(
substr(subset(df01, substr(df01, 5, 8) == '2008'), 1, 2)))
data_2008 <- test_08$Freq
data_2008
# in 2009
test_09 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2009'), 1, 2)))
data_2009 <- test_09$Freq
data_2009
# in 2010
test_10 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2010'), 1, 2)))
data_2010 <- test_10$Freq
data_2010
# in 2011
test_11 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2011'), 1, 2)))
data_2011 <- test_11$Freq
data_2011
# in 2012
test_12 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2012'), 1, 2)))
data_2012 <- test_12$Freq
data_2012
# in 2013
test_13 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2013'), 1, 2)))
data_2013 <- test_13$Freq
data_2013
# in 2014
test_14 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2014'), 1, 2)))
data_2014 <- test_14$Freq
data_2014
# in 2015
test_15 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2015'), 1, 2)))
data_2015 <- test_15$Freq
data_2015
# in 2016
test_16 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2016'), 1, 2)))
data_2016 <- test_16$Freq
data_2016
# in 2017
test_17 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2017'), 1, 2)))
data_2017 <- test_08$Freq
data_2017
# in 2018
test_18 <- as.data.frame(
table(
substr(
subset(df01, substr(df01, 5, 8) == '2018'), 1, 2)))
data_2018 <- test_18$Freq
data_2018
### data combined
df_combined <- data.frame(cbind(data_2008, data_2009, data_2010, data_2011, data_2012, data_2013, data_2014, data_2015, data_2016, data_2017, data_2018))
df_combined
colnames(df_combined) <- year_vector
df_combined$month <- c('01','02','03','04','05','06','07','08','09','10','11','12')
# make season <- subset by month
spring <- subset(df_combined, df_combined$month %in% c('03', '04', '05'))
summer <- subset(df_combined, df_combined$month %in% c('06', '07', '08'))
fall <- subset(df_combined, df_combined$month %in% c('09', '10', '11'))
winter <- subset(df_combined, df_combined$month %in% c('12', '01', '02'))
# make data frame by season avg column
df_season_avg <- data.frame(
spring = getSeasonalAvg(spring),
summer = getSeasonalAvg(summer),
fall = getSeasonalAvg(fall),
winter = getSeasonalAvg(winter))
rownames(df_season_avg) <- year_vector
getSeasonalAvg <- function(season) {
season_avg <- c()
for(i in c(1:11)) {
season_avg <- c(season_avg, round(mean(as.numeric(season[,i])), 0))
}
return(season_avg)
}
# function get Seasonal Proportion
## param : season data (data frame), full data included season (data frame)
## return : vector
getSeasonalProp <- function(season, originData) {
season_prop <- c()
for(i in c(1:11)) {
season_prop <- c(season_prop, round(sum(as.numeric(season[,i]))/sum(as.numeric(originData[,i])), 4))
}
return(season_prop * 100)
}
# function get Seasonal Proportion
## param : season data (data frame), full data included season (data frame)
## return : vector
getSeasonalTot <- function(season, yearData) {
yearProp <- round(sum(season[,-12])/sum(yearData[,-12]), 4)
return(yearProp * 100)
}
# function Transpose Data Frame
## param : data frame
## return : data frame
transDf <- function(season) {
transposedData <- as.data.frame(t(as.matrix(season)))
return(transposedData)
}
# make data frame by season avg column
df_season_avg <- data.frame(
spring = getSeasonalAvg(spring),
summer = getSeasonalAvg(summer),
fall = getSeasonalAvg(fall),
winter = getSeasonalAvg(winter))
rownames(df_season_avg) <- year_vector
# transpose data frame for melting
t_season_avg <- transDf(df_season_avg)
season <- rownames(t_season_avg)
t_season_avg$season <- season
t_season_avg
# melt data
m_season_avg <- melt(t_season_avg, id = 'season')
colnames(m_season_avg) <- c('season', 'year', 'freq')
m_season_avg
# set legend order
m_season_avg <- transform(m_season_avg, season = factor(season, levels = c('spring', 'summer', 'fall', 'winter')))
# draw season average plot
season_plot1 <- ggplot(m_season_avg, aes(x = year, y = freq, fill = season)) + geom_bar(stat='identity', position = 'dodge', aes(col = season, group = season)) + coord_cartesian(ylim = c(3000, 4500)) + labs(x = "Year", y = "Frequency", title = "Frequency of Seasonal Crime Occurance during the Last 10 years") + theme_minimal()
season_plot1
# make data frame by season prop column
df_season_prop <- data.frame(
spring = getSeasonalProp(spring, df_combined),
summer = getSeasonalProp(summer, df_combined),
fall = getSeasonalProp(fall, df_combined),
winter = getSeasonalProp(winter, df_combined))
rownames(df_season_prop) <- year_vector
df_season_prop
# tanspose season prop data
t_season_prop <- transDf(df_season_prop)
season <- rownames(t_season_prop)
t_season_prop$season <- season
t_season_prop
# melt data
m_season_prop <- melt(t_season_prop, id = 'season')
colnames(m_season_prop) <- c('season', 'year', 'prop')
# set legend order
m_season_prop <- transform(m_season_prop, season = factor(season, levels = c('spring', 'summer', 'fall', 'winter')))
m_season_prop
# draw season prop plot
season_plot2 <- ggplot(m_season_prop, aes(x = year, y = prop, fill = season)) + geom_bar(stat='identity', position = 'dodge', aes(col = season, group = season)) + coord_cartesian(ylim = c(20, 30)) + geom_text(aes(label = prop), vjust=-0.5, position = position_dodge2(width = 1)) + labs(x = "Year", y = "Percentage", title = "Percentage of Seasonal Crime Occurance during the Last 10 years") + theme_minimal()
season_plot2
df_season_tot <- data.frame(
spring = getSeasonalTot(spring, df_combined),
summer = getSeasonalTot(summer, df_combined),
fall = getSeasonalTot(fall, df_combined),
winter = getSeasonalTot(winter, df_combined)
)
df_season_tot
t_season_tot <- transDf(df_season_tot)
t_season_tot$season <- season
t_season_tot
t_season_tot <- transform(t_season_tot, season = factor(season, levels = c('spring', 'summer', 'fall', 'winter')))
ggplot(data = t_season_tot, aes(x = "", y = V1, fill = season)) + geom_bar(stat = 'identity') + coord_polar(theta = 'y', start = 0, direction = -1) + geom_text(aes(label = paste(V1,'%')), position = position_stack(vjust = 0.5)) +  labs(x = "Year", y = "Proportion", title = "Proportion of Seasonal Average Crime Occurance during the Last 10 years") + theme_minimal()
resultChisq <- chisq.test(df_season_tot[1,])
resultChisq$p.value > 0.05
## Reject Null Hypothesis
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
## Reject Null Hypothesis
### Therefore, There is a difference in seasonal crime rates.
resultChisq <- chisq.test(df_season_tot[1,])
resultChisq
df_season_tot[1,]
