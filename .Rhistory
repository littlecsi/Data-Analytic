labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
### calculating average values & adding a new column
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(df_combined[i,-12])), 0))
}
average
df_combined <- getColumns(df, 2008, 2018, c())
df_combined
### making a line graph
df_channged <- melt(df_combined, id = 'month')
df_channged
graph01 <- ggplot(df_channged, aes(x = month, y = value)) +
geom_line(aes(colour = variable, group = variable))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
df_combined
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Functions
getColumns <- function(data, sYr, fYr, columns) {
year <- as.character(c(sYr:fYr)) # Year vector (for loop)
len <- nrow(data) # Total number of rows in the data frame
colLen <- length(columns)
month <- c('01','02','03','04','05','06','07','08','09','10','11','12')
start <- 0
# finds the starting point of the data
for(i in c(1:len)) {
if(substr(data[i,2], 7, 10) == as.character(sYr)) {
cat(substr(data[i,2], 7, 10), '\n')
start <- i
break
}
}
df <- data[c(start:len),] %>% select('OCC_DATE')
df$year <- substr(df[,1], 7, 10)
df$month <- substr(df[,1], 1, 2)
if(colLen > 0) {
for(i in c(1:colLen)) {
col <- columns[i]
df <- cbind(df, data[col])
}
}
return(df)
}
####################################################################################################
### Main
df_combined <- getColumns(df, 2008, 2018, c())
df_combined
### making a line graph
df_channged <- melt(df_combined, id = 'month')
df_channged
df_combined <- getColumns(df, 2008, 2018, c())
df_combined
df_combined <- df_combined[,-1]
### making a line graph
df_channged <- melt(df_combined, id = 'month')
df_channged
df_combined
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
### Functions
getColumns <- function(data, sYr, fYr, columns) {
year <- as.character(c(sYr:fYr)) # Year vector (for loop)
len <- nrow(data) # Total number of rows in the data frame
colLen <- length(columns)
month <- c('01','02','03','04','05','06','07','08','09','10','11','12')
start <- 0
# finds the starting point of the data
for(i in c(1:len)) {
if(substr(data[i,2], 7, 10) == as.character(sYr)) {
cat(substr(data[i,2], 7, 10), '\n')
start <- i
break
}
}
df <- data[c(start:len),] %>% select('OCC_DATE')
df$year <- substr(df[,1], 7, 10)
df$month <- substr(df[,1], 1, 2)
if(colLen > 0) {
for(i in c(1:colLen)) {
col <- columns[i]
df <- cbind(df, data[col])
}
}
return(df)
}
####################################################################################################
### Functions
getColumnsDF <- function(data, sYr, fYr, columns) {
year <- as.character(c(sYr:fYr)) # Year vector (for loop)
len <- nrow(data) # Total number of rows in the data frame
colLen <- length(columns)
month <- c('01','02','03','04','05','06','07','08','09','10','11','12')
start <- 0
# finds the starting point of the data
for(i in c(1:len)) {
if(substr(data[i,2], 7, 10) == as.character(sYr)) {
cat(substr(data[i,2], 7, 10), '\n')
start <- i
break
}
}
df <- data[c(start:len),] %>% select('OCC_DATE')
df$year <- substr(df[,1], 7, 10)
df$month <- substr(df[,1], 1, 2)
if(colLen > 0) {
for(i in c(1:colLen)) {
col <- columns[i]
df <- cbind(df, data[col])
}
}
return(df)
}
df_combined <- getColumnsDF(df, 2008, 2018, c())
source('script/functions/functions.R')
source('script/functions/functions.R')
source('script/functions/functions.R')
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
df_combined <- getColumnsDF(df, 2008, 2018, c())
df_combined <- df_combined[,-1]
### making a line graph
df_channged <- melt(df_combined, id = 'month')
df_combined
### making a line graph
df_channged <- melt(df_combined, id = 'occMonth')
df_channged
### making a line graph
table(df_combined)
### making a line graph
as.data.frame(table(df_combined))
### making a line graph
df_changed <- as.data.frame(table(df_combined))
graph01 <- ggplot(df_changed, aes(x = month, y = value)) +
geom_line(aes(colour = variable, group = variable))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
### calculating average values & adding a new column
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(df_combined[i,-12])), 0))
}
average
df_combined$avg <- average
df_combined
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x=month, avg, group=1), data=df_combined[,12:13], linetype='longdash', size = 1)
graph02
df_combined
df_combined <- getColumnsDF(df, 2008, 2018, c())
df_combined <- df_combined[,-1]
df_combined
df_combined <- getColumnsDF(df, 2008, 2018, c())
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
### dataset
df <- getColumns('*')
head(df)
df_combined <- getColumnsDF(df, 2008, 2018, c())
df_combined
df_combined <- df_combined[,-1]
### making a line graph
df_changed <- as.data.frame(table(df_combined))
df_changed
graph01 <- ggplot(df_changed, aes(x = month, y = value)) +
geom_line(aes(colour = variable, group = variable))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(colour = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
### calculating average values & adding a new column
average <- c()
df_combined
df_changed
df_combined
####################################################################################################
# Library Import
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(stringr)
source('script/functions/functions.R')
source('database/getDB.R')
# OCC_DATE, OCC_TIME, REP_DATE, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
### dataset
df <- getColumns('*')
head(df)
####################################################################################################
####################################################################################################
### Main
df_combined <- getColumnsDF(df, 2008, 2018, c())
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_combined
df_changed
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(colour = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(color = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
### calculating average values & adding a new column
average <- c()
df_combined <- getColumnsDF(df, 2008, 2018, c())
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_combined
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_changed
graph01 <- ggplot(df_changed, aes(x = occMonth, y = Freq)) +
geom_line(aes(color = occYear, group = occYear))  +
labs(x = "Month", y = "Frequency", title = "The Number of Monthly Crime Occurrences per Each Year", color='Year') + dark_theme_grey()
graph01
### calculating average values & adding a new column
average <- c()
### calculating average values & adding a new column
mx_df <- as.matrix(df_changed)
mx_df
df_changed
### calculating average values & adding a new column
as.matrix(table(df_combined[,-1]))
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
ncol(mx_table)
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
average
df_combined$avg <- average
df_combined
average
df_changed$avg <- average
df_changed
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(group=1), data=average, linetype='longdash', size = 1)
as.data.frame(average)
avg <- as.data.frame(average)
### adding a new line on graph01
graph02 <- graph01 +
geom_line(x = average, aes(group=1), data=avg, linetype='longdash', size = 1)
graph02
avg <- as.data.frame(average)
graph01
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(group=1), data=avg, linetype='longdash', size = 1)
graph02
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = '', y = '', group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = '', y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
df_changed$occMonth
avg <- as.data.frame(average, occMonth = unique(df_changed$occMonth))
avg
avg <- as.data.frame(average)
avg <- cbind(avg, unique(df_combined$occMonth))
avg
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$occMonth))
avg
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
mx_table
### making a line graph
df_changed <- as.data.frame(table(df_combined[,-1]))
df_changed
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
mx_table
df_combined
### calculating average values & adding a new column
mx_table <- as.matrix(table(df_combined[,-1]))
mx_table
ncol(mx_table)
average <- c()
for(i in c(1:12)) {
average <- c(average, round(mean(as.numeric(mx_table[,i])), 0))
}
avg <- as.data.frame(average)
avg <- cbind(avg, month = unique(df_combined$occMonth))
### adding a new line on graph01
graph02 <- graph01 +
geom_line(aes(x = month, y = average, group=1), data=avg, linetype='longdash', size = 1, inherit.aes = FALSE)
graph02
head(map)
map
head(crimeData)
# OCC_DATE, OCC_TIME, REP_DATE, REP_TIME, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c("OCC_TIME", "REP_TIME", "SUB_CATE", "BEAT")
crimeData <- getColumns(col)
####################################################################################################
### Library
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(jsonlite)
####################################################################################################
### Import
source("script/functions/functions.R")
source("database/getDB.R")
####################################################################################################
### Variables
####################################################################################################
### Main
# OCC_DATE, OCC_TIME, REP_DATE, REP_TIME, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c("OCC_TIME", "REP_TIME", "SUB_CATE", "BEAT")
crimeData <- getColumns(col)
dbDisconnectAll()
##### Get Json File - Beat Area
map <- fromJSON("database/seattle_beat.json")
BeatDF <- map$features$attributes[,c(2,5)]
beatJSON <- unique(map$features$attributes$beat)
beatCrime <- unique(crimeData$BEAT)
beats <- intersect(beatJSON, beatCrime)
##### Extract Rows from Data Frame
beats
colnames(crimeData)
##### Extract Rows from Data Frame
crime_beat <- crimeData %>% subset(BEAT %in% beats)
head(crime_beat_)
head(crime_beat)
##################################################
### Crime by Beat visualisation
crime_beat$SECTOR <- substr(crime_beat$BEAT, 1, 1)
head(crime_beat$SECTOR)
library(plotly)
install.packages("plotly")
library(plotly)
### Categorize REP_TIME
plot3dDF <- crimeData["OCC_TIME", "SUB_CATE", "BEAT"]
### Categorize REP_TIME
plot3dDF <- crimeData[c("OCC_TIME", "SUB_CATE", "BEAT")]
head(plot3dDF)
length(123)
nchar(123)
substr(123, 1,1)
plot3dDF$TIME <- ifelse(nchar(plot3dDF$OCC_TIME) <= 2, 0, # 12AM ~ 1AM
ifelse(nchar(plot3dDF$OCC_TIME) == 3, substr(plot3dDF$OCC_TIME, 1, 1), # 1AM ~ 12PM
substr(plot3dDF$OCC_TIME, 1, 2))) # 12PM ~ 12AM
head(plot3dDF$TIME, 100)
str(plot3dDF)
### Rearrange data frame and remove OCC_TIME column
plot3dData <- plot3dDF[c("TIME", "SUB_CATE", "BEAT")]
head(plot3dData)
unique(plot3dDF$BEAT)
beats
unique(crime_beat$BEAT)
### Categorize REP_TIME
plot3dDF <- crime_beat[c("OCC_TIME", "SUB_CATE", "BEAT")]
plot3dDF$TIME <- ifelse(nchar(plot3dDF$OCC_TIME) <= 2, 0, # 12AM ~ 1AM
ifelse(nchar(plot3dDF$OCC_TIME) == 3, substr(plot3dDF$OCC_TIME, 1, 1), # 1AM ~ 12PM
substr(plot3dDF$OCC_TIME, 1, 2))) # 12PM ~ 12AM
head(plot3dDF)
### Group Beats to Sectors
plot3dDF$SECTOR <- substr(plot3dDF$BEAT)
### Rearrange data frame and remove OCC_TIME column
plot3dData <- plot3dDF[c("TIME", "SUB_CATE", "SECTOR")]
### Group Beats to Sectors
plot3dDF$SECTOR <- substr(plot3dDF$BEAT, 1, 1)
### Rearrange data frame and remove OCC_TIME column
plot3dData <- plot3dDF[c("TIME", "SUB_CATE", "SECTOR")]
head(plot3dData)
### Factor-ise
plot3dData$TIME <- as.factor(plot3dData$TIME)
plot3dData$SUB_CATE <- as.factor(plot3dData$SUB_CATE)
plot3dData$SECTOR <- as.factor(plot3dData$SECTOR)
str(plot3dData)
str(mtcars)
plot3d <- plot_ly(data=plot3dData, x=~TIME, y=~SUB_CATE, z=~SECTOR, colors=rainbow(2)) %>%
add_markers() %>%
layout(scene=list(xaxis=list(title="TIME"),
yaxis=list(title="SUB_CATE"),
zaxis=list(title="SECTOR")))
plot3d
plot3d
chart_link <- api_create(plot3d, filename="scatter3d-crime_by_sector")
####################################################################################################
### Library
library(dplyr)
library(ggplot2)
library(ggdark)
library(reshape2)
library(jsonlite)
library(plotly)
####################################################################################################
### Plotly setup
Sys.setenv("plotly_username"="littlecsi")
Sys.setenv("plotly_api_key"="xxleE3KwFlBSH2j0O2dD")
####################################################################################################
### Import
source("script/functions/functions.R")
source("database/getDB.R")
####################################################################################################
### Variables
####################################################################################################
##### Main
# OCC_DATE, OCC_TIME, REP_DATE, REP_TIME, SUB_CATE, PRI_DESC, PRECINCT, SECTOR, BEAT, NEIGHBOR
col <- c("OCC_TIME", "REP_TIME", "SUB_CATE", "BEAT")
crimeData <- getColumns(col)
dbDisconnectAll()
### Get Json File - Beat Area
map <- fromJSON("database/seattle_beat.json")
BeatDF <- map$features$attributes[,c(2,5)]
beatJSON <- unique(map$features$attributes$beat)
beatCrime <- unique(crimeData$BEAT)
beats <- intersect(beatJSON, beatCrime)
### Extract Rows from Data Frame
crime_beat <- crimeData %>% subset(BEAT %in% beats)
##################################################
##### 3D Plot - category, time, beat
### Categorize REP_TIME
plot3dDF <- crime_beat[c("OCC_TIME", "SUB_CATE", "BEAT")]
plot3dDF$TIME <- ifelse(nchar(plot3dDF$OCC_TIME) <= 2, 0, # 12AM ~ 1AM
ifelse(nchar(plot3dDF$OCC_TIME) == 3, substr(plot3dDF$OCC_TIME, 1, 1), # 1AM ~ 12PM
substr(plot3dDF$OCC_TIME, 1, 2))) # 12PM ~ 12AM
### Group Beats to Sectors
plot3dDF$SECTOR <- substr(plot3dDF$BEAT, 1, 1)
### Rearrange data frame and remove OCC_TIME column
plot3dData <- plot3dDF[c("TIME", "SUB_CATE", "SECTOR")]
### Factor-ise
plot3dData$TIME <- as.factor(plot3dData$TIME)
plot3dData$SUB_CATE <- as.factor(plot3dData$SUB_CATE)
plot3dData$SECTOR <- as.factor(plot3dData$SECTOR)
plot3d <- plot_ly(data=plot3dData, x=~TIME, y=~SUB_CATE, z=~SECTOR, colors=rainbow(2), type="box") %>%
add_markers() %>%
layout(scene=list(xaxis=list(title="TIME"),
yaxis=list(title="SUB_CATE"),
zaxis=list(title="SECTOR")))
chart_link <- api_create(plot3d, filename="scatter3d-crime_by_sector")
chart_link
##################################################
##### Crime by Beat visualisation
crime_beat$SECTOR <- substr(crime_beat$BEAT, 1, 1)
install.packages("plot3D")
library(plot3D)
str(iris)
### Rearrange data frame and remove OCC_TIME column
plot3dData <- plot3dDF[c("TIME", "SUB_CATE", "SECTOR")]
str(plot3dData)
TIME <- plot3dData$TIME
SUB_CATE <- plot3dData$SUB_CATE
SECTOR <- plot3dData$SECTOR
scatter3D(x=TIME, y=SUB_CATE, z=SECTOR)
